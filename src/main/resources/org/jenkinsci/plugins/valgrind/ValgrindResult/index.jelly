<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define"
  xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form"
  xmlns:i="jelly:fmt" xmlns:local="local">
  	
	<l:layout norefresh="true">
		<st:include it="${it.owner}" page="sidepanel.jelly" />
		<l:main-panel>
			   <h1>Valgrind Result</h1>
			   
			   <j:if test="${it.report.uninitializedValueErrors != null}">
				   <h2>Uninitialized Value</h2>
				   
				   An uninitialised-value use error is reported when your program uses a value which hasn't been initialised -- in other words, is undefined. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.uninitvals" target="_blank">(Valgrind Manual)</a> 
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.uninitializedValueErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>		
			   </j:if>	
			   
			   <j:if test="${it.report.uninitializedConditionErrors != null}">
				   <h2>Uninitialized Condition</h2>
				   
				   An uninitialised-condition use error is reported when a condition depends on uninitialised values.
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.value" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.uninitializedConditionErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>		
			   </j:if>
			   
			   <j:if test="${it.report.invalidWriteErrors != null}">
				   <h2>Invalid Writes</h2>
				   
				   This happens when your program writes memory at a place which Memcheck reckons it shouldn't. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.badrw" target="_blank">(Valgrind Manual)</a>				   
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.invalidWriteErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>		
			   </j:if>	   
	
			   <j:if test="${it.report.invalidReadErrors != null}">
				   <h2>Invalid Reads</h2>
				   
				   This happens when your program reads memory at a place which Memcheck reckons it shouldn't. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.badrw" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.invalidReadErrors}">
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>	
			   </j:if>	  	
			   
			   <j:if test="${it.report.overlapErrors != null}">
				   <h2>Overlaps</h2>
				   
				   If copying takes place between objects that overlap, the behavior is undefined. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.overlap" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.overlapErrors}">
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>	
			   </j:if>	
			   
			   <j:if test="${it.report.syscallParamErrors != null}">
				   <h2>Use of uninitialised or unaddressable values in system calls</h2>				   

				   Use of uninitialised or unaddressable values in system calls.
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.bad-syscall-args" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.syscallParamErrors}">
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>	
			   </j:if>	
			   
			   <j:if test="${it.report.invalidFreeErrors != null}">
				   <h2>Illegal frees</h2>				   

				   Memcheck keeps track of the blocks allocated by your program with malloc/new, so it can know exactly whether or not the argument to free/delete is legitimate or not. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.rudefn" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.invalidFreeErrors}">
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>	
			   </j:if>	
			   
			   <j:if test="${it.report.mismatchedFreeErrors != null}">
				   <h2>Mismatched frees</h2>				   

				   Memcheck keeps track of the blocks allocated by your program with malloc/new, so it can know exactly whether or not the argument to free/delete is legitimate or not. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.rudefn" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header">Error</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.mismatchedFreeErrors}">
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>	
			   </j:if>
                
               <j:if test="${it.report.leakDefinitelyLostErrors != null}">
				   <h2>Memory Leaks (definitely lost)</h2>
				   
				   This means that no pointer to the block of memory can be found. The block is classified as "lost", because the programmer could not possibly have freed it at program exit, since no pointer to it exists. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header" style="width:2em">Error</td>
				      <td class="pane-header" style="width:2em">Bytes</td>
				      <td class="pane-header">Blocks</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.leakDefinitelyLostErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				          <td class="pane">${elt.leakedBytes}</td>
				          <td class="pane">${elt.leakedBlocks}</td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>
			   </j:if>			   
			   
			   <j:if test="${it.report.leakPossiblyLostErrors != null}">
				   <h2>Memory Leaks (possibly lost)</h2>
				   
				   This means that a chain of one or more pointers to the block of memory has been found, but at least one of the pointers is an interior-pointer. This could just be a random value in memory that happens to point into the block. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks" target="_blank">(Valgrind Manual)</a>				   
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header" style="width:2em">Error</td>
				      <td class="pane-header" style="width:2em">Bytes</td>
				      <td class="pane-header">Blocks</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.leakPossiblyLostErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				          <td class="pane">${elt.leakedBytes}</td>
				          <td class="pane">${elt.leakedBlocks}</td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>	
			   </j:if>			   
			   
			   <j:if test="${it.report.leakIndirectlyLostErrors != null}">
				   <h2>Memory Leaks (indirectly lost)</h2>
				   
				   This means that the block is lost, not because there are no pointers to it, but rather because all the blocks that point to it are themselves lost. 
				   <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks" target="_blank">(Valgrind Manual)</a>
				   
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header" style="width:2em">Error</td>
				      <td class="pane-header" style="width:2em">Bytes</td>
				      <td class="pane-header">Blocks</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.leakIndirectlyLostErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane-header" style="width:2em">ID</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				          <td class="pane">${elt.leakedBytes}</td>
				          <td class="pane">${elt.leakedBlocks}</td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>
			   </j:if>	
			   
			   <j:if test="${it.report.leakStillReachableErrors != null}">
				   <h2>Memory Leaks (still reachable)</h2>
				   
				    A start-pointer or chain of start-pointers to the block is found. Since the block is still pointed at, the programmer could, at least in principle, have freed it before program exit.
				    <a href="http://valgrind.org/docs/manual/mc-manual.html#mc-manual.leaks" target="_blank">(Valgrind Manual)</a>
				    
				   <st:header name="Content-Type" value="text/html;charset=UTF-8" />
				   <table class="pane sortable" id="files">
				    <tr>
				      <td class="pane-header" style="width:2em">Executable</td>
				      <td class="pane-header" style="width:2em">ID</td>
				      <td class="pane-header" style="width:2em">Error</td>
				      <td class="pane-header" style="width:2em">Bytes</td>
				      <td class="pane-header">Blocks</td>
				    </tr>			    
				    <tbody>			
				    <j:forEach var="elt" items="${it.report.leakStillReachableErrors}">    
				        <tr>		            
				          <td class="pane">${elt.executable}</td>
				          <td class="pane">${elt.uniqueId}</td>
				          <td class="pane"><a href="id=${elt.executable},${elt.uniqueId}">${elt.description}</a></td>
				          <td class="pane">${elt.leakedBytes}</td>
				          <td class="pane">${elt.leakedBlocks}</td>
				        </tr>
				    </j:forEach>			
				    </tbody>    
				   </table>
			   </j:if>	
			   				   		  
		</l:main-panel>
	</l:layout>
</j:jelly>
